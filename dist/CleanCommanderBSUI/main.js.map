{"version":3,"sources":["./src/app/create-command/create-command.component.ts","./src/app/create-command/create-command.component.html","./src/app/commands-list/commands-list.component.ts","./src/app/commands-list/commands-list.component.html","./src/app/shared/services/routeServices/platform-exists.service.ts","./src/environments/environment.ts","./src/app/platform-thumbnail/platform-thumbnail.component.ts","./src/app/platform-thumbnail/platform-thumbnail.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/platforms-list/platforms-list.component.html","./src/app/platforms-list/platforms-list.component.ts","./src/app/app.module.ts","./src/app/routes.ts","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/command-details/command-details.component.ts","./src/app/command-details/command-details.component.html","./src/app/create-platform/create-platform.component.ts","./src/app/create-platform/create-platform.component.html","./src/app/shared/services/commander.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-command',\n  templateUrl: './create-command.component.html',\n  styleUrls: ['./create-command.component.css']\n})\nexport class CreateCommandComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>create-command works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.css']\n})\nexport class CommandsListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>commands-list works!</p>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { CommanderService } from '../commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformExistsService implements CanActivate {\n\n  constructor(private commandService:CommanderService, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot) {\n    const platformExists = !!this.commandService.getPlatformById(route.params['id'])//Check if the event with the given id exists.\n    //!! casts to boolean. + casts to a number, needs to be done since the route.params['id'] is a string\n\n    //If the event does not exist, redirect to an error page.\n    if (!platformExists)\n      this.router.navigate(['/404']);\n\n    //If the event does exist, return true so that the route can be acessed\n    return platformExists;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'platform-thumbnail',\n  templateUrl: './platform-thumbnail.component.html',\n  styleUrls: ['./platform-thumbnail.component.css']\n})\nexport class PlatformThumbnailComponent implements OnInit {\n\n  constructor() { }\n  @Input()platform:Platform;\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [routerLink]=\"['/platforms', platform.promptPlatformId]\" class=\"well hoverwell thumbnail\">\n    <h2>{{platform?.promptPlatformName | uppercase}}</h2>\n    <!-- <div>Date: {{event?.date | date}}</div>\n    <div [ngClass]=\"{green: event?.time === '8:00 am', bold: event?.time === '8:00 am'}\" [ngSwitch]=\"event?.time\">\n        Time: {{event?.time}}\n        <span *ngSwitchCase=\"'8:00 am'\">(Early start)</span>\n        <span *ngSwitchCase=\"'10:00 am'\">(Late start)</span>\n        <span *ngSwitchDefault>(Normal start)</span>\n    </div>\n    <div>Price {{event?.price}}</div>\n    <div *ngIf=\"event?.location\">\n        <span>Location: {{event?.location.address}}</span>\n        <span class=\"pad-left\">{{event?.location.city}}, {{event.location.country}}</span>\n    </div> -->\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CleanCommanderBSUI';\n}\n","\n<app-navbar></app-navbar>\n<router-outlet></router-outlet>","<div>\n    <h1>Platforms</h1>\n    <hr />\n    <div class=\"row\">\n        <div *ngFor=\"let platform of platforms\" class=\"col-md-5\">\n            <platform-thumbnail [platform]=\"platform\"></platform-thumbnail>\n            <!-- [event]=\"event\" makes the event object available in the event-thumbnail component via an input parameter called event,\n            thus we are passing data from the events-list component to the event-thumbnail child component-->\n         </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-platforms-list',\n  templateUrl: './platforms-list.component.html',\n  styleUrls: ['./platforms-list.component.css']\n})\nexport class PlatformsListComponent implements OnInit {\n\n  constructor(private commandService:CommanderService) { }\n\n  platforms:Platform[];\n\n  ngOnInit(): void {\n    this.getPlatforms().subscribe(platforms => this.platforms = platforms); //This is now done in the EventsListResolverService\n    //this.events = this.route.snapshot.data['events'];//Data for the events property is now taken from the route\n  }\n\n  getPlatforms(){\n    return this.commandService.getPlatformsList();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { appRoutes } from './routes';\nimport { AppComponent } from './app.component';\nimport { CommandsListComponent } from './commands-list/commands-list.component';\nimport { PlatformsListComponent } from './platforms-list/platforms-list.component';\nimport { CommandDetailsComponent } from './command-details/command-details.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { CreateCommandComponent } from './create-command/create-command.component';\nimport { CreatePlatformComponent } from './create-platform/create-platform.component';\nimport { RouterModule } from '@angular/router';\nimport { PlatformThumbnailComponent } from './platform-thumbnail/platform-thumbnail.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CommandsListComponent,\n    PlatformsListComponent,\n    CommandDetailsComponent,\n    NavbarComponent,\n    CreateCommandComponent,\n    CreatePlatformComponent,\n    PlatformThumbnailComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes } from \"@angular/router\";\r\nimport { CommandDetailsComponent } from \"./command-details/command-details.component\";\r\nimport { CommandsListComponent } from \"./commands-list/commands-list.component\";\r\nimport { PlatformExistsService } from \"./shared/services/routeServices/platform-exists.service\";\r\n\r\n\r\nexport const appRoutes:Routes = [\r\n    {path: 'commands', component: CommandsListComponent},\r\n    {path: 'commands/:id', component: CommandDetailsComponent, canActivate: [PlatformExistsService]},//This uses a service as a route guard. EventRouteActivatorService returns true if the event with the given id exists.\r\n    {path: '', redirectTo: '/commands', pathMatch: 'full'}//Default route\r\n]\r\n\r\n//Notes.\r\n//Before resolving this route, call EventsListResolverService. \r\n//When this service finishes and returns data, add this data to a property called events on the route.\r\n//This events property can now be picked out of the route in the component that uses the route, in this case the eventsList component.","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>navbar works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-command-details',\n  templateUrl: './command-details.component.html',\n  styleUrls: ['./command-details.component.css']\n})\nexport class CommandDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>command-details works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-platform',\n  templateUrl: './create-platform.component.html',\n  styleUrls: ['./create-platform.component.css']\n})\nexport class CreatePlatformComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>create-platform works!</p>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommanderService {\n\n  readonly apiUrl = 'https://localhost:44363/api/platform/';\n  constructor(private http: HttpClient) { }\n\n  //Get platforms list\n  getPlatformsList():Observable<any[]>{\n    return this.http.get<any>(this.apiUrl);\n  }\n\n  //Get platform by id\n  //https://localhost:44363/api/platform/{platformId}\n  getPlatformById(platformId: string):Observable<any[]>{\n    return this.http.get<any>(this.apiUrl + platformId)\n  }\n  \n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}