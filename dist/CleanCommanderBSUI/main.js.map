{"version":3,"sources":["./src/app/create-command/create-command.component.ts","./src/app/create-command/create-command.component.html","./src/app/shared/directives/modal-trigger.directive.ts","./src/app/errors/not-found/not-found.component.ts","./src/app/errors/not-found/not-found.component.html","./src/app/commands-list/commands-list.component.html","./src/app/commands-list/commands-list.component.ts","./src/environments/environment.ts","./src/app/shared/services/common/toastr.service.ts","./src/app/search-modal/search-modal.component.ts","./src/app/search-modal/search-modal.component.html","./src/app/shared/services/auth.service.ts","./src/app/platform-thumbnail/platform-thumbnail.component.ts","./src/app/platform-thumbnail/platform-thumbnail.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/platforms-list/platforms-list.component.html","./src/app/platforms-list/platforms-list.component.ts","./src/app/app.module.ts","./src/app/routes.ts","./src/app/shared/resolvers/platforms-list.resolver.ts","./src/app/commands-list/collapsible-well.component.html","./src/app/commands-list/collapsible-well.component.ts","./src/app/platform-details/platform-details.component.ts","./src/app/platform-details/platform-details.component.html","./src/app/navbar/navbar.component.html","./src/app/navbar/navbar.component.ts","./src/app/shared/resolvers/platform.resolver.ts","./src/app/shared/services/common/jquery.service.ts","./src/app/create-platform/create-platform.component.ts","./src/app/create-platform/create-platform.component.html","./src/app/shared/services/commander.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Command } from '../models/Command';\n\n@Component({\n  selector: 'create-command',\n  templateUrl: './create-command.component.html',\n  styleUrls: ['./create-command.component.css']\n})\nexport class CreateCommandComponent implements OnInit {\n  newCommandForm: FormGroup;\n  howTo: FormControl;\n  commandLine: FormControl;\n  comment: FormControl;\n\n  @Input() platformId: string;\n  @Input() platformName: string;\n\n  @Output() addNewCommand = new EventEmitter;\n  @Output() cancelAddNewCommand = new EventEmitter;\n  constructor() { }\n\n  ngOnInit(): void {\n    //Initialize all the formControls with initial value and validation.\n    //These will be used in the form fields as formControlName=\"presenter\" etc..\n    this.howTo = new FormControl('', Validators.required);\n    this.commandLine = new FormControl('', Validators.required);\n\n    //The custom validator function restrictedWords, is added to this field, so when this field is validated, the function is called.\n    this.comment = new FormControl('', [Validators.required, Validators.maxLength(400)]);\n\n    //Initialize the formGroup with all the formControls. This will be used in the form as [formGroup]=\"newSessionForm\" in the template\n    this.newCommandForm = new FormGroup({\n      howTo: this.howTo,\n      commandLine: this.commandLine,\n      comment: this.comment,\n    })\n  }\n\n  //The ngSubmit function that is called when the create session form is submitted\n  saveCommand(formValues) {\n    let command: Command = {\n      commandLineId: undefined,//id will eventually be provided in a http service\n      howTo: formValues.howTo,\n      line: formValues.commandLine,//+ casts to a number\n      promptPlatformName: this.platformName,\n      comment: formValues.comment,\n      promptPlatformId: this.platformId\n    }\n\n    //The create-session component is used as a child component in the event-details component. So when a new session is added here, this event is fired, and it can\n    //then be handled in the component that uses it.\n    this.addNewCommand.emit(command);\n  }\n\n  cancel() {\n    this.cancelAddNewCommand.emit();\n  }\n}\n","<div class=\"col-md-12\">\n    <h3>Create command</h3>\n</div>\n<div class=\"col-md-6\">\n    <form [formGroup]=\"newCommandForm\" (ngSubmit)=\"saveCommand(newCommandForm.value)\" autocomplete=\"off\">\n        <div class=\"form-group\" [ngClass]=\"{'error': howTo.invalid && howTo.dirty}\">\n            <label for=\"howTo\">How to:</label>\n            <em *ngIf=\"howTo.invalid && howTo.dirty\">Required</em>\n            <input formControlName=\"howTo\" id=\"howTo\" type=\"text\" class=\"form-control\" placeholder=\"How to...\" />\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{'error': commandLine.invalid && commandLine.dirty}\">\n            <label for=\"commandLine\">Command Line:</label>\n            <em *ngIf=\"commandLine.invalid && commandLine.dirty\">Required</em>\n            <textarea formControlName=\"commandLine\" id=\"commandLine\" type=\"text\" class=\"form-control\"\n                placeholder=\"Command Line...\"></textarea>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{'error': comment.invalid && comment.dirty}\">\n            <label for=\"comment\">Comment:</label>\n            <em *ngIf=\"comment.invalid && comment.dirty\">Required</em>\n            <em *ngIf=\"comment.invalid && comment.dirty && comment?.errors.maxLength\">Cannot exceed 400\n                characters</em>\n            <textarea formControlName=\"comment\" id=\"comment\" rows=3 class=\"form-control\"\n                placeholder=\"comment...\"></textarea>\n        </div>\n        <button type=\"submit\" [disabled]=\"newCommandForm.invalid\" class=\"btn btn-primary\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\n    </form>\n</div>","import { Directive, ElementRef, Inject, Input, OnInit } from '@angular/core';\nimport { JQ_TOKEN } from '../services/common/jquery.service';\n\n@Directive({\n  selector: '[modal-trigger]'//The [brackets] indicate that it is an attribute, not an element, which is what is used for components.\n})\nexport class ModalTriggerDirective implements OnInit {\n  private el: HTMLElement;\n\n  //This is used to get the value from the modal-trigger element in navbar.component.html.\n  //Since modal-trigger is not a valid name for an input parameter, we need to create an Alias for it (modalId), which is done like this.\n  @Input('modal-trigger') modalId:string;\n\n  constructor(ref: ElementRef, @Inject(JQ_TOKEN) private $:any) {\n    //This is used to get a handle to the html element on which the directive is used.\n    this.el = ref.nativeElement;\n  }\n\n  ngOnInit(): void {\n    //Here, we use the element handle to listen to the click event on that element. That way, the modal is opened on the click event instead of onInit.\n    this.el.addEventListener('click', e => {\n      this.$(`#${this.modalId}`).modal({})\n    })\n  }\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 class=\"errorMessage\">404'd</h1>","<!-- sessions comes from the sessions input parameter defined in the SessionListComponent, and they are added to it in the eventDetails component html -->\n<div class=\"row\" *ngFor=\"let command of commands\">\n    <div class=\"col-md-10\">\n      <!-- The title added to the collapsible-well Component, using the title input parameter.\n  The title can then be used in the collapsible-well Component html, and the output will be shown here in the app-session-list element -->\n      <collapsible-well>\n        <div well-title>\n          {{command.howTo}}\n        </div>\n  \n        <div well-body>\n          <h6>Platform: {{command.promptPlatformName}}</h6><br />\n          <span>Command line: {{command.line}}</span><br /><br />\n          <div #container>\n            <button ngxClipboard [cbContent]=\"command.line\" [container]=\"container\">Copy Command Line</button>\n          </div>\n          <br />\n          <span>Comment:</span>\n          <p>{{command.comment}}</p>\n        </div>\n      </collapsible-well>\n    </div>\n  </div>","import { Component, Input, OnInit } from '@angular/core';\nimport { Command } from 'selenium-webdriver';\n\n@Component({\n  selector: 'commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.css']\n})\nexport class CommandsListComponent implements OnInit {\n  @Input() commands: Command[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { InjectionToken } from '@angular/core';\n\nexport let TOASTR_TOKEN = new InjectionToken<Toastr>('toastr');\n\nexport interface Toastr{\n  success(message: string, title?: string):void;\n  info(message: string, title?: string):void;\n  warning(message: string, title?: string):void;\n  error(message: string, title?: string):void;\n}","import { Component, ElementRef, Inject, Input, OnInit, ViewChild } from '@angular/core';\nimport { JQ_TOKEN } from '../shared/services/common/jquery.service';\n\n@Component({\n  selector: 'search-modal',\n  templateUrl: './search-modal.component.html',\n  styleUrls: ['./search-modal.component.css']\n})\nexport class SearchModalComponent implements OnInit {\n  @Input() title: string;\n  @Input() elementId: string;\n  @Input() closeOnBodyClick: string;//This is used as a setting for weather you want to close the modal on body click, or not.\n\n  //When this component is initialized, containerEl will give access to the DOM element that has the #modalContainer\n  @ViewChild('modalContainer') containerEl: ElementRef;\n\n  constructor(@Inject(JQ_TOKEN) private $: any) { }\n\n  ngOnInit(): void {\n  }\n\n  //When the user clicks a result in the result modal-dialog, the modal should close\n  closeModal() {\n    if (this.closeOnBodyClick === \"true\")\n      this.$(this.containerEl.nativeElement).modal('hide')//containerEl points to the html element that has the #modalContainer on it.\n  }\n}","<!-- The id for the modal {{elementId}}, is set using an Input parameter in \"simple-modal.component.ts\", \n    and the value is set in the component that uses this \"simple-modal component\" i.e. \"navbar.component.html\"-->\n    <div id=\"{{elementId}}\" #modalContainer class=\"modal fade\" tabindex=\"-1\">\n        <div class=\"modal-dialog\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span>&times;</span></button>\n                    <h4 class=\"modal-title\">{{title}}</h4>\n                </div>\n                <!-- When the user clicks a result in the result modal-dialog, the modal should close -->\n                <div class=\"modal-body\" (click)=\"closeModal()\">\n                    <ng-content></ng-content>\n                </div>\n            </div>\n        </div>\n    </div>","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { IUser } from 'src/app/models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  currentUser: IUser\n  readonly apiUrl = 'https://localhost:44363/api/authentication/';\n\n  constructor(private http: HttpClient) { }\n\n    loginUser(userName: string, password: string) {\n        let options = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\n        let loginInfo = { username: userName, password: password };\n\n        //tap() lets you tap into the data that is returned by an observable http call. \n        //We want to get the returned login info to set the current user. tap() doesn't change data, it only reads. Map() will manipulate data.\n        return this.http.post(this.apiUrl +'authenticate', loginInfo, options)\n            .pipe(tap(data => {\n                this.currentUser = <IUser>data['user'];//data['user'] is what is returned from the server.\n            }))\n            .pipe(catchError(err => {\n                return of(false);\n            }));\n    }\n\n    isAuthenticated() {\n      return !!this.currentUser;//Returns true if the current user object is set. !! converts to boolean\n  }\n\n  checkAuthenticationStatus() {\n      //This could also be done in a subscribe. Using tap() instead, gives the user the option to subscribe to the returned data where\n      //checkAuthenticationStatus is called, and use it for something there. \n      return this.http.get('/api/currentIdentity')\n          .pipe(tap(data => {\n              if (data instanceof Object) {\n                  this.currentUser = <IUser>data;\n              }\n          }))//We could also write .subscribe(); here, remove the return, and then write .subscribe(); over in app.component like, this.auth.checkAuthenticationStatus().subscribe();\n  }\n\n    // login(form: NgForm) {\n    //   const credentials = JSON.stringify(form.value);\n    //   this.http.post(\"http://localhost:5000/api/auth/login\", credentials, {\n    //     headers: new HttpHeaders({\n    //       \"Content-Type\": \"application/json\"\n    //     })\n    //   }).subscribe(response => {\n    //     const token = (<any>response).token;\n    //     localStorage.setItem(\"jwt\", token);\n    //     this.invalidLogin = false;\n    //     this.router.navigate([\"/\"]);\n    //   }, err => {\n    //     this.invalidLogin = true;\n    //   });\n    // }\n}\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'platform-thumbnail',\n  templateUrl: './platform-thumbnail.component.html',\n  styleUrls: ['./platform-thumbnail.component.css']\n})\nexport class PlatformThumbnailComponent implements OnInit {\n\n  constructor() { }\n  @Input()platform:Platform;\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [routerLink]=\"['/platforms', platform.promptPlatformId]\" class=\"well hoverwell thumbnail\">\n    <h2>{{platform?.promptPlatformName | uppercase}}</h2>\n    <div>There are {{platform?.commandLineList.length}} commands for this platform</div>\n    <!-- <div>Date: {{event?.date | date}}</div>\n    <div [ngClass]=\"{green: event?.time === '8:00 am', bold: event?.time === '8:00 am'}\" [ngSwitch]=\"event?.time\">\n        Time: {{event?.time}}\n        <span *ngSwitchCase=\"'8:00 am'\">(Early start)</span>\n        <span *ngSwitchCase=\"'10:00 am'\">(Late start)</span>\n        <span *ngSwitchDefault>(Normal start)</span>\n    </div>\n    <div>Price {{event?.price}}</div>\n    <div *ngIf=\"event?.location\">\n        <span>Location: {{event?.location.address}}</span>\n        <span class=\"pad-left\">{{event?.location.city}}, {{event.location.country}}</span>\n    </div> -->\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CleanCommanderBSUI';\n}\n","\n<app-navbar></app-navbar>\n<router-outlet></router-outlet>","<div>\n    <h1>Platforms</h1>\n    <hr />\n    <div class=\"row\">\n        <div *ngFor=\"let platform of platforms\" class=\"col-md-5\">\n            <platform-thumbnail [platform]=\"platform\"></platform-thumbnail>\n            <!-- [event]=\"event\" makes the event object available in the event-thumbnail component via an input parameter called event,\n            thus we are passing data from the events-list component to the event-thumbnail child component-->\n         </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-platforms-list',\n  templateUrl: './platforms-list.component.html',\n  styleUrls: ['./platforms-list.component.css']\n})\nexport class PlatformsListComponent implements OnInit {\n\n  constructor(private commandService:CommanderService, private route: ActivatedRoute) { }\n\n  platforms:Platform[];\n\n  ngOnInit(): void {\n    //this.getPlatforms().subscribe(platforms => this.platforms = platforms); //This is now done in the EventsListResolverService\n    this.platforms = this.route.snapshot.data['platforms'];//Data for the events property is now taken from the route\n  }\n\n  getPlatforms(){\n    return this.commandService.getPlatformsList();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { appRoutes } from './routes';\nimport { AppComponent } from './app.component';\nimport { CommandsListComponent } from './commands-list/commands-list.component';\nimport { PlatformsListComponent } from './platforms-list/platforms-list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { CreateCommandComponent } from './create-command/create-command.component';\nimport { CreatePlatformComponent } from './create-platform/create-platform.component';\nimport { RouterModule } from '@angular/router';\nimport { PlatformThumbnailComponent } from './platform-thumbnail/platform-thumbnail.component';\nimport { CommanderService } from './shared/services/commander.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PlatformDetailsComponent } from './platform-details/platform-details.component';\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\nimport { CollapsibleWellComponent } from './commands-list/collapsible-well.component';\nimport { SearchModalComponent } from './search-modal/search-modal.component';\nimport { Toastr, TOASTR_TOKEN } from './shared/services/common/toastr.service';\nimport { JQ_TOKEN } from './shared/services/common/jquery.service';\nimport { ModalTriggerDirective } from './shared/directives/modal-trigger.directive';\nimport { ClipboardModule } from 'ngx-clipboard';\nimport { LoginComponent } from './user/login/login.component';\n\nlet toastr:Toastr = window['toastr'];\nlet jQuery = window['$'];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CommandsListComponent,\n    PlatformsListComponent,\n    NavbarComponent,\n    CreateCommandComponent,\n    CreatePlatformComponent,\n    PlatformThumbnailComponent,\n    PlatformDetailsComponent,\n    NotFoundComponent,\n    CollapsibleWellComponent,\n    SearchModalComponent,\n    ModalTriggerDirective,\n    //LoginComponent\n    \n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes),\n    ClipboardModule\n  ],\n  providers: [\n    CommanderService,\n    {\n      provide: TOASTR_TOKEN, \n      useValue: toastr\n    },\n    {\n      provide: JQ_TOKEN, \n      useValue: jQuery\n    },\n  ],\n  \n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes } from \"@angular/router\";\r\nimport { CreatePlatformComponent } from \"./create-platform/create-platform.component\";\r\nimport { NotFoundComponent } from \"./errors/not-found/not-found.component\";\r\nimport { PlatformDetailsComponent } from \"./platform-details/platform-details.component\";\r\nimport { PlatformsListComponent } from \"./platforms-list/platforms-list.component\";\r\nimport { PlatformResolver } from \"./shared/resolvers/platform.resolver\";\r\nimport { PlatformsListResolver } from \"./shared/resolvers/platforms-list.resolver\";\r\n\r\n\r\nexport const appRoutes:Routes = [\r\n    {path: 'platforms/new', component: CreatePlatformComponent},\r\n    {path: 'platforms', component: PlatformsListComponent, resolve:{platforms:PlatformsListResolver}},\r\n    {path: 'platforms/:id', component: PlatformDetailsComponent, resolve:{platform:PlatformResolver}},//This uses a service as a route guard. EventRouteActivatorService returns true if the event with the given id exists.\r\n    {path: '404', component: NotFoundComponent},\r\n    {path: '', redirectTo: '/platforms', pathMatch: 'full'},//Default route\r\n    {\r\n        path: 'user',\r\n        loadChildren: ()=> import('./user/user.module').//This loads the user module with a function, when the path starts with 'user'. \r\n        then(m => m.UserModule)                         //So, this module is loaded only when the user accesses the user profile, which saves loading ressources in big apps\r\n    }\r\n]\r\n\r\n//Notes.\r\n//Before resolving this route, call EventsListResolverService. \r\n//When this service finishes and returns data, add this data to a property called events on the route.\r\n//This events property can now be picked out of the route in the component that uses the route, in this case the eventsList component.","import { Injectable } from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformsListResolver implements Resolve<any> {\n\n  constructor(private service:CommanderService){}\n\n  resolve() {\n    return this.service.getPlatformsList();\n  }\n}\n","<div (click)=\"toggleContent()\" class=\"pointable clickBar\">\n    <span>Expand</span>\n</div>\n<div class=\"well\">\n    <h4>\n        <ng-content select=\"[well-title]\"></ng-content>\n        \n    </h4>   \n    <!-- ng-content is used to show the contents of the collapsible-well element, which is placed in the session-list.component.html\n    title comes from the title input parameter defined in collapsible-well.component.ts, and it is added to this parameter in the the session-list.component.html\nwhere the collapsible-well element is used. This is an example of content projection.-->\n    <ng-content *ngIf=\"visible\" select=\"[well-body]\"></ng-content>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'collapsible-well',\n  templateUrl: './collapsible-well.component.html',\n  styleUrls: ['./collapsible-well.component.css']\n})\nexport class CollapsibleWellComponent implements OnInit {\n  visible:boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  toggleContent(){\n    this.visible = !this.visible;\n  }\n\n}\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { platform } from 'process';\nimport { Command } from '../models/Command';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\nimport { Toastr, TOASTR_TOKEN } from '../shared/services/common/toastr.service';\n\n@Component({\n  selector: 'app-platform-details',\n  templateUrl: './platform-details.component.html',\n  styleUrls: ['./platform-details.component.css']\n})\nexport class PlatformDetailsComponent implements OnInit {\n  platform:Platform;\n  addMode: boolean;\n  constructor(private route: ActivatedRoute, private service: CommanderService,  private router: Router, @Inject(TOASTR_TOKEN) private toastr:Toastr) { }\n\n  ngOnInit(): void {\n    this.route.data.forEach((data) => {\n      this.platform = data['platform'];\n      this.addMode = false;\n      //console.log(this.platform);\n    });\n  }\n\n  addCommand() {\n    this.addMode = true;\n  }\n\n  //The only time we need to update an event, is when adding a new session to it.\n  addNewCommand(command: Command) {\n    //Create a new id for the new session. This will take the session id with the biggest value, from the sessions array.\n    //const nextId = Math.max.apply(null, this.event.sessions.map(s => s.id));\n    //Set the new session id to nextId plus 1 to make it unique.\n    //session.id = nextId + 1;\n    this.platform.commandLineList.push(command);\n    this.service.updatePlatform(this.platform).subscribe();\n    this.toastr.success('New command created');\n    this.addMode = false;\n    //this.router.navigate(['/platforms/']);\n  }\n\n  cancelAddNewCommand() {\n    this.addMode = false;\n  }\n}","<div class=\"container\">  \n    <div class=\"row\">\n      <div class=\"col-md-11\">\n        <h2>{{platform?.promptPlatformName}} </h2>\n      </div>\n    </div>\n    <img [src]=\"platform?.promptPlatformImageUrl\" [alt]=\"platform?.promptPlatformName\" class=\"event-image\">\n    <hr />\n  \n  <div class=\"row\" style=\"margin-bottom: 10px;\">\n    <div class=\"col-md-2\">\n      <h3 style=\"margin:0\">Commands</h3>\n    </div>\n    \n    <div class=\"col-md-2\">\n      <a (click)=\"addCommand()\">Create command</a>\n    </div>\n  </div>\n  \n  <!-- Here, the sessions are added to the SessionListComponent, using the sessions input parameter.\n  The sessions can then be used in the SessionListComponent html, and the output will be shown here in the app-session-list element -->\n  <commands-list [commands]=\"platform?.commandLineList\" *ngIf=\"!addMode\"></commands-list>\n  <create-command [platformId]=\"platform?.promptPlatformId\" [platformName]=\"platform?.promptPlatformName\" *ngIf=\"addMode\" (addNewCommand)=\"addNewCommand($event)\"\n  (cancelAddNewCommand)=\"cancelAddNewCommand()\"></create-command>\n  <!-- <app-create-session *ngIf=\"addMode\" (addNewSession)=\"addNewSession($event)\"\n    (cancelAddNewSession)=\"cancelAddNewSession()\"></app-create-session> -->","<div class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" >Platforms</a>\n      </div>\n  \n      <div class=\"collapse navbar-collapse\">\n        <ul class=\"nav navbar-nav\">\n          <li>\n            <a [routerLink]=\"['/platforms']\" routerLinkActive = \"active\" [routerLinkActiveOptions]=\"{exact:true}\">All Platforms</a>\n          </li>\n          <li><a [routerLink]=\"['/platforms/new']\" routerLinkActive = \"active\">Create platform</a></li>\n          <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" >\n              Events\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li >\n                <a href=\"\">Angular Connect</a>\n              </li>\n            </ul>\n          </li>\n        </ul>\n        <div class=\"navbar-header navbar-right\">\n          <ul class=\"nav navbar-nav\">\n            <li>\n              <a *ngIf=\"!authService.isAuthenticated()\" [routerLink]=\"['/user/login']\">Login</a>\n              <a *ngIf=\"authService.isAuthenticated()\" [routerLink]=\"['/user/profile']\" routerLinkActive=\"active\">Welcome {{authService.currentUser.firstName}}</a>\n            </li>\n          </ul>\n        </div>\n        <form id=\"searchForm\" (ngSubmit)=\"searchCommands(searchTerm)\" class=\"navbar-form navbar-right\">\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"searchTerm\" name=\"searchTerm\" type=\"text\" class=\"form-control\"\n              placeholder=\"Search Commands\">\n          </div>\n          <!-- modal-trigger is a directive, that can add new functionality to existing DOM elements. So here, we create a new directive called modal-trigger,\n              that is triggered by the button. It will be in shared/directives/modal-trigger.directive.ts.\n            The value of modal-trigger is the same as the elementId of the simple-modal it opens. The modal-trigger can then be passed\n          in to the directive using an input parameter with the same name i.e. \"modal-trigger\" (See modal-trigger.directive.ts) -->\n          <button class=\"btn btn-default\" modal-trigger=\"searchResults\">\n            Search\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>\n\n  <!-- Use content projection as for the collapsible-well -->\n  <search-modal closeOnBodyClick=\"true\" title=\"Found Commands\" elementId=\"searchResults\">\n    <div class=\"list-group\">\n      <a class=\"list-group-item\" *ngFor=\"let command of foundCommands\" [routerLink]=\"['/platforms', command.promptPlatformId]\">{{command.howTo}}</a>\n    </div>\n  </search-modal>","import { Component, OnInit } from '@angular/core';\nimport { Command } from '../models/Command';\nimport { AuthService } from '../shared/services/auth.service';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(public authService: AuthService, private service:CommanderService) { }\n\n  searchTerm:string=\"\";\n  foundCommands:Command[];\n  ngOnInit(): void {\n  }\n  searchCommands(searchTerm){\n    this.service.searchCommands(searchTerm).subscribe(data => {\n      this.foundCommands = data;\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformResolver implements Resolve<any> {\n  constructor(private service:CommanderService){}\n\n  resolve(route:ActivatedRouteSnapshot) {\n    return this.service.getPlatformById(route.params['id']);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport let JQ_TOKEN = new InjectionToken<Object>('jQuery');","import { Component, Inject, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Platform} from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\nimport { Toastr, TOASTR_TOKEN } from '../shared/services/common/toastr.service';\n\n@Component({\n  selector: 'app-create-platform',\n  templateUrl: './create-platform.component.html',\n  styleUrls: ['./create-platform.component.css']\n})\nexport class CreatePlatformComponent implements OnInit {\n  newPlatformForm: FormGroup;\n  promptPlatformName: FormControl;\n  promptPlatformImageUrl: FormControl;\n\n  constructor(private router:Router, private service:CommanderService, @Inject(TOASTR_TOKEN) private toastr:Toastr) { }\n\n  public isDirty: boolean = true;\n  ngOnInit(): void {\n    this.promptPlatformName = new FormControl('', Validators.required);\n    this.promptPlatformImageUrl = new FormControl('', Validators.required);\n\n    //Initialize the formGroup with all the formControls. This will be used in the form as [formGroup]=\"newSessionForm\" in the template\n    this.newPlatformForm = new FormGroup({\n      promptPlatformName: this.promptPlatformName,\n      promptPlatformImageUrl: this.promptPlatformImageUrl\n    })\n  }\n\n  cancel() {\n    this.router.navigate(['/platforms']);\n  }\n\n  savePlatform(formValues){\n    let platform: Platform = {\n      promptPlatformId: undefined,\n      promptPlatformName:formValues.promptPlatformName,\n      promptPlatformImageUrl:formValues.promptPlatformImageUrl,\n      commandLineList:[]\n    }\n    this.service.savePlatform(platform).subscribe(() => {\n    this.toastr.success('New platform created');\n    this.isDirty = false;\n      this.router.navigate(['/platforms'])\n    });\n  }\n}\n","<div class=\"col-md-12\">\n    <h3>Create Platform</h3>\n</div>\n<div class=\"col-md-6\">\n    <form [formGroup]=\"newPlatformForm\" (ngSubmit)=\"savePlatform(newPlatformForm.value)\" autocomplete=\"off\">\n        <div class=\"form-group\" [ngClass]=\"{'error': promptPlatformName.invalid && promptPlatformName.dirty}\">\n            <label for=\"promptPlatformName\">Platform Name:</label>\n            <em *ngIf=\"promptPlatformName.invalid && promptPlatformName.dirty\">Required</em>\n            <input formControlName=\"promptPlatformName\" id=\"promptPlatformName\" type=\"text\" class=\"form-control\" placeholder=\"Platform Name...\" />\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{'error': promptPlatformImageUrl.invalid && promptPlatformImageUrl.dirty}\">\n            <label for=\"promptPlatformImageUrl\">Image Url:</label>\n            <em *ngIf=\"promptPlatformImageUrl.invalid && promptPlatformImageUrl.dirty\">Required</em>\n            <textarea formControlName=\"promptPlatformImageUrl\" id=\"promptPlatformImageUrl\" type=\"text\" class=\"form-control\"\n                placeholder=\"Image Url...\"></textarea>\n        </div>\n        <button type=\"submit\" [disabled]=\"newPlatformForm.invalid\" class=\"btn btn-primary\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\n    </form>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Platform } from 'src/app/models/Platform';\nimport { Router } from '@angular/router';\nimport { Command } from 'src/app/models/Command';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommanderService {\n\n    readonly apiUrl = 'https://localhost:44363/api/platform/';\n    readonly commandApiUrl = 'https://localhost:44363/api/platform/{platformId}/command';\n    errorMsg: string;\n    constructor(private http: HttpClient, private router: Router) { }\n\n    //Get platforms list\n    getPlatformsList(): Observable<Platform[]> {\n        return this.http.get<Platform[]>(this.apiUrl)\n            .pipe(catchError(this.handleError<Platform[]>('getPlatformsList', [])));\n    }\n\n    //Get platform by id\n    //https://localhost:44363/api/platform/{platformId}\n    getPlatformById(platformId: string): Observable<Platform> {\n        return this.http.get<any>(this.apiUrl + platformId)\n            .pipe(catchError(this.handleError<Platform>('getPlatformById')));;\n    }\n\n    //Save a newly created event.\n    //Also handles updates since the API is made so that, if the posted event exists, it will be updated.\n    savePlatform(platform) {\n        let options = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\n        return this.http.post<Platform>(this.apiUrl, platform, options)\n            .pipe(catchError(this.handleError<Platform>('savePlatform')));\n    }\n\n    //Update plaatform, including the list of commands. This is also used when creating a new command, since we are adding a new item to the platforms list of commands.\n    updatePlatform(platform) {\n        let options = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\n        return this.http.put<Platform>(this.apiUrl, platform, options)\n            .pipe(catchError(this.handleError<Platform>('updatePlatform')));\n    }\n\n    saveCommand(command) {\n        let options = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) }\n        return this.http.post<Command>(this.apiUrl + command.promptPlatformId + '/command', command, options)\n            .pipe(catchError(this.handleError<Platform>('saveCommand')));\n    }\n\n    searchCommands(searchTerm: string): Observable<Command[]> {\n        return this.http.get<any>(this.apiUrl + searchTerm)\n            .pipe(catchError(this.handleError<Platform>('searchCommands')));;\n    }\n\n\n    private handleError<T>(operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n            if (error.status == 404) {\n                this.router.navigate(['/404']);\n            }\n            //console.error(error);\n            return of(result as T);\n        }\n    }\n\n    private getServerErrorMessage(error: HttpErrorResponse): string {\n        switch (error.status) {\n            case 404: {\n                return `Not Found: ${error.message}`;\n            }\n            case 403: {\n                return `Access Denied: ${error.message}`;\n            }\n            case 500: {\n                return `Internal Server Error: ${error.message}`;\n            }\n            default: {\n                return `Unknown Server Error: ${error.message}`;\n            }\n\n        }\n    }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}