{"version":3,"sources":["./src/app/create-command/create-command.component.ts","./src/app/create-command/create-command.component.html","./src/app/errors/not-found/not-found.component.ts","./src/app/errors/not-found/not-found.component.html","./src/app/commands-list/commands-list.component.ts","./src/app/commands-list/commands-list.component.html","./src/environments/environment.ts","./src/app/platform-thumbnail/platform-thumbnail.component.ts","./src/app/platform-thumbnail/platform-thumbnail.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/platforms-list/platforms-list.component.html","./src/app/platforms-list/platforms-list.component.ts","./src/app/app.module.ts","./src/app/routes.ts","./src/app/shared/resolvers/platforms-list.resolver.ts","./src/app/platform-details/platform-details.component.ts","./src/app/platform-details/platform-details.component.html","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/shared/resolvers/platform.resolver.ts","./src/app/create-platform/create-platform.component.ts","./src/app/create-platform/create-platform.component.html","./src/app/shared/services/commander.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-command',\n  templateUrl: './create-command.component.html',\n  styleUrls: ['./create-command.component.css']\n})\nexport class CreateCommandComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>create-command works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 class=\"errorMessage\">404'd</h1>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.css']\n})\nexport class CommandsListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>commands-list works!</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'platform-thumbnail',\n  templateUrl: './platform-thumbnail.component.html',\n  styleUrls: ['./platform-thumbnail.component.css']\n})\nexport class PlatformThumbnailComponent implements OnInit {\n\n  constructor() { }\n  @Input()platform:Platform;\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [routerLink]=\"['/platforms', platform.promptPlatformId]\" class=\"well hoverwell thumbnail\">\n    <h2>{{platform?.promptPlatformName | uppercase}}</h2>\n    <div>There are {{platform?.commandLineList.length}} commands for this platform</div>\n    <!-- <div>Date: {{event?.date | date}}</div>\n    <div [ngClass]=\"{green: event?.time === '8:00 am', bold: event?.time === '8:00 am'}\" [ngSwitch]=\"event?.time\">\n        Time: {{event?.time}}\n        <span *ngSwitchCase=\"'8:00 am'\">(Early start)</span>\n        <span *ngSwitchCase=\"'10:00 am'\">(Late start)</span>\n        <span *ngSwitchDefault>(Normal start)</span>\n    </div>\n    <div>Price {{event?.price}}</div>\n    <div *ngIf=\"event?.location\">\n        <span>Location: {{event?.location.address}}</span>\n        <span class=\"pad-left\">{{event?.location.city}}, {{event.location.country}}</span>\n    </div> -->\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CleanCommanderBSUI';\n}\n","\n<app-navbar></app-navbar>\n<router-outlet></router-outlet>","<div>\n    <h1>Platforms</h1>\n    <hr />\n    <div class=\"row\">\n        <div *ngFor=\"let platform of platforms\" class=\"col-md-5\">\n            <platform-thumbnail [platform]=\"platform\"></platform-thumbnail>\n            <!-- [event]=\"event\" makes the event object available in the event-thumbnail component via an input parameter called event,\n            thus we are passing data from the events-list component to the event-thumbnail child component-->\n         </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-platforms-list',\n  templateUrl: './platforms-list.component.html',\n  styleUrls: ['./platforms-list.component.css']\n})\nexport class PlatformsListComponent implements OnInit {\n\n  constructor(private commandService:CommanderService, private route: ActivatedRoute) { }\n\n  platforms:Platform[];\n\n  ngOnInit(): void {\n    //this.getPlatforms().subscribe(platforms => this.platforms = platforms); //This is now done in the EventsListResolverService\n    this.platforms = this.route.snapshot.data['platforms'];//Data for the events property is now taken from the route\n  }\n\n  getPlatforms(){\n    return this.commandService.getPlatformsList();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { appRoutes } from './routes';\nimport { AppComponent } from './app.component';\nimport { CommandsListComponent } from './commands-list/commands-list.component';\nimport { PlatformsListComponent } from './platforms-list/platforms-list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { CreateCommandComponent } from './create-command/create-command.component';\nimport { CreatePlatformComponent } from './create-platform/create-platform.component';\nimport { RouterModule } from '@angular/router';\nimport { PlatformThumbnailComponent } from './platform-thumbnail/platform-thumbnail.component';\nimport { CommanderService } from './shared/services/commander.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PlatformDetailsComponent } from './platform-details/platform-details.component';\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CommandsListComponent,\n    PlatformsListComponent,\n    NavbarComponent,\n    CreateCommandComponent,\n    CreatePlatformComponent,\n    PlatformThumbnailComponent,\n    PlatformDetailsComponent,\n    NotFoundComponent\n    \n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [CommanderService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes } from \"@angular/router\";\r\nimport { NotFoundComponent } from \"./errors/not-found/not-found.component\";\r\nimport { PlatformDetailsComponent } from \"./platform-details/platform-details.component\";\r\nimport { PlatformsListComponent } from \"./platforms-list/platforms-list.component\";\r\nimport { PlatformResolver } from \"./shared/resolvers/platform.resolver\";\r\nimport { PlatformsListResolver } from \"./shared/resolvers/platforms-list.resolver\";\r\n\r\n\r\nexport const appRoutes:Routes = [\r\n    {path: 'platforms', component: PlatformsListComponent, resolve:{platforms:PlatformsListResolver}},\r\n    {path: 'platforms/:id', component: PlatformDetailsComponent, resolve:{platform:PlatformResolver}},//This uses a service as a route guard. EventRouteActivatorService returns true if the event with the given id exists.\r\n    {path: '404', component: NotFoundComponent},\r\n    {path: '', redirectTo: '/platforms', pathMatch: 'full'}//Default route\r\n]\r\n\r\n//Notes.\r\n//Before resolving this route, call EventsListResolverService. \r\n//When this service finishes and returns data, add this data to a property called events on the route.\r\n//This events property can now be picked out of the route in the component that uses the route, in this case the eventsList component.","import { Injectable } from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformsListResolver implements Resolve<any> {\n\n  constructor(private service:CommanderService){}\n\n  resolve() {\n    return this.service.getPlatformsList();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'app-platform-details',\n  templateUrl: './platform-details.component.html',\n  styleUrls: ['./platform-details.component.css']\n})\nexport class PlatformDetailsComponent implements OnInit {\n  platform:Platform;\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.data.forEach((data) => {\n      this.platform = data['platform'];\n    });\n  }\n\n}\n","<div class=\"container\">\n    <img [src]=\"platform?.promptPlatformImageUrl\" [alt]=\"platform?.promptPlatformName\" class=\"event-image\">\n  \n    <div class=\"row\">\n      <div class=\"col-md-11\">\n        <h2>{{platform?.promptPlatformName}} </h2>\n      </div>\n    </div>\n  <hr />\n  \n  <div class=\"row\" style=\"margin-bottom: 10px;\">\n    <div class=\"col-md-2\">\n      <h3 style=\"margin:0\">Commands</h3>\n    </div>\n    \n    <div class=\"col-md-2\">\n      <!-- <a (click)=\"addSession()\">Create session</a> -->\n    </div>\n  </div>\n  \n  <!-- Here, the sessions are added to the SessionListComponent, using the sessions input parameter.\n  The sessions can then be used in the SessionListComponent html, and the output will be shown here in the app-session-list element -->\n  <!-- <app-session-list [eventId]=\"event?.id\" [filterBy]=\"filterBy\" [sortBy]=\"sortBy\" [sessions]=event?.sessions *ngIf=\"!addMode\"></app-session-list>\n  <app-create-session *ngIf=\"addMode\" (addNewSession)=\"addNewSession($event)\"\n    (cancelAddNewSession)=\"cancelAddNewSession()\"></app-create-session> -->","import { Component, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  searchTerm:string=\"\";\n  foundPlatforms:Platform[];\n  ngOnInit(): void {\n  }\n  searchPlatforms(searchTerm){\n\n  }\n}\n","<div class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" >Platforms</a>\n      </div>\n  \n      <div class=\"collapse navbar-collapse\">\n        <ul class=\"nav navbar-nav\">\n          <li>\n            <a [routerLink]=\"['/platforms']\" routerLinkActive = \"active\" [routerLinkActiveOptions]=\"{exact:true}\">All Platforms</a>\n          </li>\n          <li><a [routerLink]=\"['/events/new']\" routerLinkActive = \"active\">Create Event</a></li>\n          <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" >\n              Events\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li >\n                <a href=\"\">Angular Connect</a>\n              </li>\n            </ul>\n          </li>\n        </ul>\n        <div class=\"navbar-header navbar-right\">\n          <!-- <ul class=\"nav navbar-nav\">\n            <li>\n              <a *ngIf=\"!authService.isAuthenticated()\" [routerLink]=\"['/user/login']\">Login</a>\n              <a *ngIf=\"authService.isAuthenticated()\" [routerLink]=\"['/user/profile']\" routerLinkActive=\"active\">Welcome {{authService.currentUser.firstName}}</a>\n            </li>\n          </ul> -->\n        </div>\n        <form id=\"searchForm\" (ngSubmit)=\"searchPlatforms(searchTerm)\" class=\"navbar-form navbar-right\"  >\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"searchTerm\" name=\"searchTerm\" type=\"text\" class=\"form-control\" placeholder=\"Search Commands\" >\n          </div>\n          <button class=\"btn btn-default\" >\n            Search\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>","import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformResolver implements Resolve<any> {\n  constructor(private service:CommanderService){}\n\n  resolve(route:ActivatedRouteSnapshot) {\n    return this.service.getPlatformById(route.params['id']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-platform',\n  templateUrl: './create-platform.component.html',\n  styleUrls: ['./create-platform.component.css']\n})\nexport class CreatePlatformComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>create-platform works!</p>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Platform } from 'src/app/models/Platform';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommanderService {\n\n    readonly apiUrl = 'https://localhost:44363/api/platform/';\n    errorMsg: string;\n    constructor(private http: HttpClient, private router: Router) { }\n\n    //Get platforms list\n    getPlatformsList(): Observable<Platform[]> {\n        return this.http.get<Platform[]>(this.apiUrl)\n            .pipe(catchError(this.handleError<Platform[]>('getPlatformsList', [])));\n    }\n\n    //Get platform by id\n    //https://localhost:44363/api/platform/{platformId}\n    getPlatformById(platformId: string): Observable<Platform> {\n        return this.http.get<any>(this.apiUrl + platformId)\n            .pipe(catchError(this.handleError<Platform>('getPlatformById')));;\n    }\n\n\n    private handleError<T>(operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n            if (error.status == 404) {\n                this.router.navigate(['/404']);\n            }\n            //console.error(error);\n            return of(result as T);\n        }\n    }\n\n    private getServerErrorMessage(error: HttpErrorResponse): string {\n        switch (error.status) {\n            case 404: {\n                return `Not Found: ${error.message}`;\n            }\n            case 403: {\n                return `Access Denied: ${error.message}`;\n            }\n            case 500: {\n                return `Internal Server Error: ${error.message}`;\n            }\n            default: {\n                return `Unknown Server Error: ${error.message}`;\n            }\n\n        }\n    }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}