{"version":3,"sources":["./src/app/create-command/create-command.component.ts","./src/app/create-command/create-command.component.html","./src/app/errors/not-found/not-found.component.ts","./src/app/errors/not-found/not-found.component.html","./src/app/commands-list/commands-list.component.html","./src/app/commands-list/commands-list.component.ts","./src/environments/environment.ts","./src/app/platform-thumbnail/platform-thumbnail.component.ts","./src/app/platform-thumbnail/platform-thumbnail.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/platforms-list/platforms-list.component.html","./src/app/platforms-list/platforms-list.component.ts","./src/app/app.module.ts","./src/app/routes.ts","./src/app/shared/resolvers/platforms-list.resolver.ts","./src/app/commands-list/collapsible-well.component.html","./src/app/commands-list/collapsible-well.component.ts","./src/app/platform-details/platform-details.component.html","./src/app/platform-details/platform-details.component.ts","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/app/shared/resolvers/platform.resolver.ts","./src/app/create-platform/create-platform.component.ts","./src/app/create-platform/create-platform.component.html","./src/app/shared/services/commander.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Command } from '../models/Command';\n\n@Component({\n  selector: 'create-command',\n  templateUrl: './create-command.component.html',\n  styleUrls: ['./create-command.component.css']\n})\nexport class CreateCommandComponent implements OnInit {\n  newCommandForm: FormGroup;\n  howTo: FormControl;\n  commandLine: FormControl;\n  comment: FormControl;\n\n  @Input() platformId: string;\n  @Input() platformName: string;\n\n  @Output() addNewCommand = new EventEmitter;\n  @Output() cancelAddNewCommand = new EventEmitter;\n  constructor() { }\n\n  ngOnInit(): void {\n    //Initialize all the formControls with initial value and validation.\n    //These will be used in the form fields as formControlName=\"presenter\" etc..\n    this.howTo = new FormControl('', Validators.required);\n    this.commandLine = new FormControl('', Validators.required);\n\n    //The custom validator function restrictedWords, is added to this field, so when this field is validated, the function is called.\n    this.comment = new FormControl('', [Validators.required, Validators.maxLength(400)]);\n\n    //Initialize the formGroup with all the formControls. This will be used in the form as [formGroup]=\"newSessionForm\" in the template\n    this.newCommandForm = new FormGroup({\n      howTo: this.howTo,\n      commandLine: this.commandLine,\n      comment: this.comment,\n    })\n  }\n\n  //The ngSubmit function that is called when the create session form is submitted\n  saveCommand(formValues) {\n    let command: Command = {\n      commandLineId: undefined,//id will eventually be provided in a http service\n      howTo: formValues.howTo,\n      line: formValues.commandLine,//+ casts to a number\n      promptPlatformName: this.platformName,\n      comment: formValues.comment,\n      promptPlatformId: this.platformId\n    }\n\n    //The create-session component is used as a child component in the event-details component. So when a new session is added here, this event is fired, and it can\n    //then be handled in the component that uses it.\n    this.addNewCommand.emit(command);\n  }\n\n  cancel() {\n    this.cancelAddNewCommand.emit();\n  }\n}\n","<p>create-command works!</p>\n<div class=\"col-md-12\">\n    <h3>Create command</h3>\n</div>\n<div class=\"col-md-6\">\n    <form [formGroup]=\"newCommandForm\" (ngSubmit)=\"saveCommand(newCommandForm.value)\" autocomplete=\"off\">\n        <div class=\"form-group\" [ngClass]=\"{'error': howTo.invalid && howTo.dirty}\">\n            <label for=\"howTo\">How to:</label>\n            <em *ngIf=\"howTo.invalid && howTo.dirty\">Required</em>\n            <input formControlName=\"howTo\" id=\"howTo\" type=\"text\" class=\"form-control\" placeholder=\"How to...\" />\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{'error': commandLine.invalid && commandLine.dirty}\">\n            <label for=\"commandLine\">Command Line:</label>\n            <em *ngIf=\"commandLine.invalid && commandLine.dirty\">Required</em>\n            <textarea formControlName=\"commandLine\" id=\"commandLine\" type=\"text\" class=\"form-control\"\n                placeholder=\"Command Line...\"></textarea>\n        </div>\n        <div class=\"form-group\" [ngClass]=\"{'error': comment.invalid && comment.dirty}\">\n            <label for=\"comment\">Comment:</label>\n            <em *ngIf=\"comment.invalid && comment.dirty\">Required</em>\n            <em *ngIf=\"comment.invalid && comment.dirty && comment?.errors.maxLength\">Cannot exceed 400\n                characters</em>\n            <textarea formControlName=\"comment\" id=\"comment\" rows=3 class=\"form-control\"\n                placeholder=\"comment...\"></textarea>\n        </div>\n        <button type=\"submit\" [disabled]=\"newCommandForm.invalid\" class=\"btn btn-primary\">Save</button>\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">Cancel</button>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h1 class=\"errorMessage\">404'd</h1>","<!-- sessions comes from the sessions input parameter defined in the SessionListComponent, and they are added to it in the eventDetails component html -->\n<div class=\"row\" *ngFor=\"let command of commands\">\n    <div class=\"col-md-10\">\n      <!-- The title added to the collapsible-well Component, using the title input parameter.\n  The title can then be used in the collapsible-well Component html, and the output will be shown here in the app-session-list element -->\n      <collapsible-well>\n        <div well-title>\n          {{command.howTo}}\n        </div>\n  \n        <div well-body>\n          <h6>Platform: {{command.promptPlatformName}}</h6>\n          <span>Command line: {{command.line}}</span><br />\n          <span>Comment:</span>\n          <p>{{command.comment}}</p>\n        </div>\n      </collapsible-well>\n    </div>\n  </div>","import { Component, Input, OnInit } from '@angular/core';\nimport { Command } from 'selenium-webdriver';\n\n@Component({\n  selector: 'commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.css']\n})\nexport class CommandsListComponent implements OnInit {\n  @Input() commands: Command[];\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'platform-thumbnail',\n  templateUrl: './platform-thumbnail.component.html',\n  styleUrls: ['./platform-thumbnail.component.css']\n})\nexport class PlatformThumbnailComponent implements OnInit {\n\n  constructor() { }\n  @Input()platform:Platform;\n\n  ngOnInit(): void {\n  }\n\n}\n","<div [routerLink]=\"['/platforms', platform.promptPlatformId]\" class=\"well hoverwell thumbnail\">\n    <h2>{{platform?.promptPlatformName | uppercase}}</h2>\n    <div>There are {{platform?.commandLineList.length}} commands for this platform</div>\n    <!-- <div>Date: {{event?.date | date}}</div>\n    <div [ngClass]=\"{green: event?.time === '8:00 am', bold: event?.time === '8:00 am'}\" [ngSwitch]=\"event?.time\">\n        Time: {{event?.time}}\n        <span *ngSwitchCase=\"'8:00 am'\">(Early start)</span>\n        <span *ngSwitchCase=\"'10:00 am'\">(Late start)</span>\n        <span *ngSwitchDefault>(Normal start)</span>\n    </div>\n    <div>Price {{event?.price}}</div>\n    <div *ngIf=\"event?.location\">\n        <span>Location: {{event?.location.address}}</span>\n        <span class=\"pad-left\">{{event?.location.city}}, {{event.location.country}}</span>\n    </div> -->\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CleanCommanderBSUI';\n}\n","\n<app-navbar></app-navbar>\n<router-outlet></router-outlet>","<div>\n    <h1>Platforms</h1>\n    <hr />\n    <div class=\"row\">\n        <div *ngFor=\"let platform of platforms\" class=\"col-md-5\">\n            <platform-thumbnail [platform]=\"platform\"></platform-thumbnail>\n            <!-- [event]=\"event\" makes the event object available in the event-thumbnail component via an input parameter called event,\n            thus we are passing data from the events-list component to the event-thumbnail child component-->\n         </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-platforms-list',\n  templateUrl: './platforms-list.component.html',\n  styleUrls: ['./platforms-list.component.css']\n})\nexport class PlatformsListComponent implements OnInit {\n\n  constructor(private commandService:CommanderService, private route: ActivatedRoute) { }\n\n  platforms:Platform[];\n\n  ngOnInit(): void {\n    //this.getPlatforms().subscribe(platforms => this.platforms = platforms); //This is now done in the EventsListResolverService\n    this.platforms = this.route.snapshot.data['platforms'];//Data for the events property is now taken from the route\n  }\n\n  getPlatforms(){\n    return this.commandService.getPlatformsList();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { appRoutes } from './routes';\nimport { AppComponent } from './app.component';\nimport { CommandsListComponent } from './commands-list/commands-list.component';\nimport { PlatformsListComponent } from './platforms-list/platforms-list.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { CreateCommandComponent } from './create-command/create-command.component';\nimport { CreatePlatformComponent } from './create-platform/create-platform.component';\nimport { RouterModule } from '@angular/router';\nimport { PlatformThumbnailComponent } from './platform-thumbnail/platform-thumbnail.component';\nimport { CommanderService } from './shared/services/commander.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PlatformDetailsComponent } from './platform-details/platform-details.component';\nimport { NotFoundComponent } from './errors/not-found/not-found.component';\nimport { CollapsibleWellComponent } from './commands-list/collapsible-well.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CommandsListComponent,\n    PlatformsListComponent,\n    NavbarComponent,\n    CreateCommandComponent,\n    CreatePlatformComponent,\n    PlatformThumbnailComponent,\n    PlatformDetailsComponent,\n    NotFoundComponent,\n    CollapsibleWellComponent\n    \n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  providers: [CommanderService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes } from \"@angular/router\";\r\nimport { NotFoundComponent } from \"./errors/not-found/not-found.component\";\r\nimport { PlatformDetailsComponent } from \"./platform-details/platform-details.component\";\r\nimport { PlatformsListComponent } from \"./platforms-list/platforms-list.component\";\r\nimport { PlatformResolver } from \"./shared/resolvers/platform.resolver\";\r\nimport { PlatformsListResolver } from \"./shared/resolvers/platforms-list.resolver\";\r\n\r\n\r\nexport const appRoutes:Routes = [\r\n    {path: 'platforms', component: PlatformsListComponent, resolve:{platforms:PlatformsListResolver}},\r\n    {path: 'platforms/:id', component: PlatformDetailsComponent, resolve:{platform:PlatformResolver}},//This uses a service as a route guard. EventRouteActivatorService returns true if the event with the given id exists.\r\n    {path: '404', component: NotFoundComponent},\r\n    {path: '', redirectTo: '/platforms', pathMatch: 'full'}//Default route\r\n]\r\n\r\n//Notes.\r\n//Before resolving this route, call EventsListResolverService. \r\n//When this service finishes and returns data, add this data to a property called events on the route.\r\n//This events property can now be picked out of the route in the component that uses the route, in this case the eventsList component.","import { Injectable } from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformsListResolver implements Resolve<any> {\n\n  constructor(private service:CommanderService){}\n\n  resolve() {\n    return this.service.getPlatformsList();\n  }\n}\n","<div (click)=\"toggleContent()\" class=\"well pointable\">\n    <h4>\n        <ng-content select=\"[well-title]\"></ng-content>\n        \n    </h4>   \n    <!-- ng-content is used to show the contents of the collapsible-well element, which is placed in the session-list.component.html\n    title comes from the title input parameter defined in collapsible-well.component.ts, and it is added to this parameter in the the session-list.component.html\nwhere the collapsible-well element is used. This is an example of content projection.-->\n    <ng-content *ngIf=\"visible\" select=\"[well-body]\"></ng-content>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'collapsible-well',\n  templateUrl: './collapsible-well.component.html',\n  styleUrls: ['./collapsible-well.component.css']\n})\nexport class CollapsibleWellComponent implements OnInit {\n  visible:boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  toggleContent(){\n    this.visible = !this.visible;\n  }\n\n}\n","<div class=\"container\">\n    <img [src]=\"platform?.promptPlatformImageUrl\" [alt]=\"platform?.promptPlatformName\" class=\"event-image\">\n  \n    <div class=\"row\">\n      <div class=\"col-md-11\">\n        <h2>{{platform?.promptPlatformName}} </h2>\n      </div>\n    </div>\n  <hr />\n  \n  <div class=\"row\" style=\"margin-bottom: 10px;\">\n    <div class=\"col-md-2\">\n      <h3 style=\"margin:0\">Commands</h3>\n    </div>\n    \n    <div class=\"col-md-2\">\n      <a (click)=\"addCommand()\">Create command</a>\n    </div>\n  </div>\n  \n  <!-- Here, the sessions are added to the SessionListComponent, using the sessions input parameter.\n  The sessions can then be used in the SessionListComponent html, and the output will be shown here in the app-session-list element -->\n  <commands-list [commands]=\"platform?.commandLineList\" *ngIf=\"!addMode\"></commands-list>\n  <create-command [platformId]=\"platform?.promptPlatformId\" [platformName]=\"platform?.promptPlatformName\" *ngIf=\"addMode\" (addNewCommand)=\"addNewCommand($event)\"\n  (cancelAddNewCommand)=\"cancelAddNewCommand()\"></create-command>\n  <!-- <app-create-session *ngIf=\"addMode\" (addNewSession)=\"addNewSession($event)\"\n    (cancelAddNewSession)=\"cancelAddNewSession()\"></app-create-session> -->","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { platform } from 'process';\nimport { Command } from '../models/Command';\nimport { Platform } from '../models/Platform';\nimport { CommanderService } from '../shared/services/commander.service';\n\n@Component({\n  selector: 'app-platform-details',\n  templateUrl: './platform-details.component.html',\n  styleUrls: ['./platform-details.component.css']\n})\nexport class PlatformDetailsComponent implements OnInit {\n  platform:Platform;\n  addMode: boolean;\n  constructor(private route: ActivatedRoute, private service: CommanderService) { }\n\n  ngOnInit(): void {\n    this.route.data.forEach((data) => {\n      this.platform = data['platform'];\n      this.addMode = false;\n      //console.log(this.platform);\n    });\n  }\n\n  addCommand() {\n    this.addMode = true;\n  }\n\n  //The only time we need to update an event, is when adding a new session to it.\n  addNewCommand(command: Command) {\n    //Create a new id for the new session. This will take the session id with the biggest value, from the sessions array.\n    //const nextId = Math.max.apply(null, this.event.sessions.map(s => s.id));\n    //Set the new session id to nextId plus 1 to make it unique.\n    //session.id = nextId + 1;\n    this.platform.commandLineList.push(command);\n    this.service.savePlatform(this.platform).subscribe();\n    this.addMode = false;\n  }\n\n  cancelAddNewSession() {\n    this.addMode = false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Platform } from '../models/Platform';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  searchTerm:string=\"\";\n  foundPlatforms:Platform[];\n  ngOnInit(): void {\n  }\n  searchPlatforms(searchTerm){\n\n  }\n}\n","<div class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" >Platforms</a>\n      </div>\n  \n      <div class=\"collapse navbar-collapse\">\n        <ul class=\"nav navbar-nav\">\n          <li>\n            <a [routerLink]=\"['/platforms']\" routerLinkActive = \"active\" [routerLinkActiveOptions]=\"{exact:true}\">All Platforms</a>\n          </li>\n          <li><a [routerLink]=\"['/events/new']\" routerLinkActive = \"active\">Create Event</a></li>\n          <li class=\"dropdown\">\n            <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" >\n              Events\n              <span class=\"caret\"></span>\n            </a>\n            <ul class=\"dropdown-menu\">\n              <li >\n                <a href=\"\">Angular Connect</a>\n              </li>\n            </ul>\n          </li>\n        </ul>\n        <div class=\"navbar-header navbar-right\">\n          <!-- <ul class=\"nav navbar-nav\">\n            <li>\n              <a *ngIf=\"!authService.isAuthenticated()\" [routerLink]=\"['/user/login']\">Login</a>\n              <a *ngIf=\"authService.isAuthenticated()\" [routerLink]=\"['/user/profile']\" routerLinkActive=\"active\">Welcome {{authService.currentUser.firstName}}</a>\n            </li>\n          </ul> -->\n        </div>\n        <form id=\"searchForm\" (ngSubmit)=\"searchPlatforms(searchTerm)\" class=\"navbar-form navbar-right\"  >\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"searchTerm\" name=\"searchTerm\" type=\"text\" class=\"form-control\" placeholder=\"Search Commands\" >\n          </div>\n          <button class=\"btn btn-default\" >\n            Search\n          </button>\n        </form>\n      </div>\n    </div>\n  </div>","import { Injectable } from '@angular/core';\nimport {\n  Router, Resolve,\n  RouterStateSnapshot,\n  ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { CommanderService } from '../services/commander.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformResolver implements Resolve<any> {\n  constructor(private service:CommanderService){}\n\n  resolve(route:ActivatedRouteSnapshot) {\n    return this.service.getPlatformById(route.params['id']);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-create-platform',\n  templateUrl: './create-platform.component.html',\n  styleUrls: ['./create-platform.component.css']\n})\nexport class CreatePlatformComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>create-platform works!</p>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Platform } from 'src/app/models/Platform';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CommanderService {\n\n    readonly apiUrl = 'https://localhost:44363/api/platform/';\n    errorMsg: string;\n    constructor(private http: HttpClient, private router: Router) { }\n\n    //Get platforms list\n    getPlatformsList(): Observable<Platform[]> {\n        return this.http.get<Platform[]>(this.apiUrl)\n            .pipe(catchError(this.handleError<Platform[]>('getPlatformsList', [])));\n    }\n\n    //Get platform by id\n    //https://localhost:44363/api/platform/{platformId}\n    getPlatformById(platformId: string): Observable<Platform> {\n        return this.http.get<any>(this.apiUrl + platformId)\n            .pipe(catchError(this.handleError<Platform>('getPlatformById')));;\n    }\n\n    //Save a newly created event.\n  //Also handles updates since the API is made so that, if the posted event exists, it will be updated.\n  savePlatform(platform) {\n    let options = {headers: new HttpHeaders({'Content-Type':'application/json'})}\n    return this.http.post<Platform>(this.apiUrl, platform, options)\n    .pipe(catchError(this.handleError<Platform>('savePlatform')));\n  }\n\n\n    private handleError<T>(operation = 'operation', result?: T) {\n        return (error: any): Observable<T> => {\n            if (error.status == 404) {\n                this.router.navigate(['/404']);\n            }\n            //console.error(error);\n            return of(result as T);\n        }\n    }\n\n    private getServerErrorMessage(error: HttpErrorResponse): string {\n        switch (error.status) {\n            case 404: {\n                return `Not Found: ${error.message}`;\n            }\n            case 403: {\n                return `Access Denied: ${error.message}`;\n            }\n            case 500: {\n                return `Internal Server Error: ${error.message}`;\n            }\n            default: {\n                return `Unknown Server Error: ${error.message}`;\n            }\n\n        }\n    }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}